<?xml version="1.0" encoding="utf-8"?>
<pysysdirconfig>
	<!-- This file provides default configuration for all tests under this directory. 
	
	Settings are also inherited from pysysdirconfig.xml files in parent directories 
	(and the pysysdirconfig element from pysysproject.xml if present). 
	-->

	<!--
	Prefix
	~~~~~~
	Specify a prefix to be added to the id of all tests under this directory.
	This is in addition to any defined by individual tests. 
	-->
	<id-prefix>MyServer.Performance.</id-prefix>
	
	<!-- 
	Maker templates
	~~~~~~~~~~~~~~~
	Specify the templates that can be used by "pysys make" when creating new tests. You may wish to provide 
	project or directory-specific template(s) to simplify creating new tests for different purposes, and to encourage 
	test creators to follow best practices (rather than just copying from a random test which may not be a good example). 
	
	Run "pysys make -h" to see which templates are available for creating tests under the current directory. 
	
	The first template (in the lowest-level pysysdirconfig.xml file) is used by default, but that can be customized 
	by using set-default-maker-template to name a different template (for example at project 
	level or in another pysysdirconfig higher up the directory tree). 
	
	Each template is defined by:
	
	  - name: A short name used to select this template on the command line ("lowercase-with-hyphens" naming convention).
	  - description: A brief summary describing what kind of test is created by this template. This text is displayed 
	    when running "pysys make -h". 
	  - copy: A comma-separated list of files and directories to be copied into the test directory, supporting ``*`` 
	    globs. Either specify a path relative to the directory containing this XML file, or an absolute path using 
	    project properties. To use files from the default PySys template use ``${pysysTemplatesDir}/test/*``.
	    You could store your directory-specific templates in a ``_pysys_templates/`` directory alongside this XML file
	    (with a ``.pysysignore`` file to stop them being treated as test cases), 
	    or you could use a real (but simple) test to copy from (with suitable regex replacements to make it more generic). 
	  - mkdir: By default empty directories are created for the configured input, output and reference directories.  
	    Specify this attribute to define explicitly which empty directories should be created. 
	  - replace: Specify any dynamic substitutions, which will be applied in all copied files. It is recommended to 
	    use only ASCII-characters (but if any non-ASCII characters are provided they will be substituted as UTF-8). 
	    The replacement "with" expressions can include project properties using ``${propname}`` syntax, or 
	    the special strings ``@{DIR_NAME}``, ``@{USERNAME}``, ``@{DATE}``, ``@{DEFAULT_DESCRIPTOR}``. 
	    If no replace elements are explicitly provided, the following default replacements are used:
	    
	    - ``@@DATE@@`` -> ``@{DATE}`` (the current date)
	    - ``@@USERNAME@@`` -> ``@{USERNAME}`` (the currently logged in user)
	    - ``@@DIR_NAME@@`` -> ``@{DIR_NAME}`` (the basename of the directory being created, typically the test id)
	    - ``@@DEFAULT_DESCRIPTOR@@`` -> ``@{DEFAULT_DESCRIPTOR}`` (the __pysys_title__ and other descriptor lines from the 
	      standard PySys default test template, after which you can add your customized Python test class)
	    - ``@@LINE_LENGTH_GUIDE@@`` -> ``@{LINE_LENGTH_GUIDE}`` (80 underline characters to indicate to the user when they are 
	      exceeding the recommended maximum length for a test title; this string can be customized for different 
	      lengths etc using the pysystestTemplateLineLengthGuide project property)
	
	By default PySys creates ``.py`` files with tabs for indentation (as in previous PySys releases). If you prefer spaces, 
	just set the ``pythonIndentationSpacesPerTab`` project property to a string containing the required spaces per tab.
	
	See :ref:`pysys/UserGuide:Create new test templates for pysys make` for more on how to create templates. 

	-->
	<maker-template name="perf-test" description="a performance test including configuration for my fictional performance tool" 
		copy="${pysysTemplatesDir}/default-test/*, ./_pysys_templates/perf/my-perf-config.xml"/>

	<maker-template name="my-test" description="a test with the Python code pre-customized to get things started" 
		copy="./_pysys_templates/MyTemplateTest/*" />

	<maker-template name="foobar-test" description="an advanced test based on the existing XXX test" 
		copy="./PySysDirConfigSample/*" 
		mkdir="ExtraDir1, ExtraDir2"
	>
		<replace regex='__pysys_title__ *= r"""[^"]*"""' with='__pysys_title__   = r""" Foobar - My new @{DIR_NAME} test title TODO """'/>
		<replace regex='__pysys_authors__ *= "[^"]*"'    with='__pysys_authors__ = "@{USERNAME}"'/>
		<replace regex='__pysys_created__ *= "[^"]*"'    with='__pysys_created__ = "@{DATE}"'/>
		<replace regex='@@DIR_NAME@@'                    with='@{DIR_NAME}'/>
	</maker-template>

	<maker-template name="pysys-xml-test" description="an old-style test with pysystest.xml and run.py" 
		copy="${pysysTemplatesDir}/pysystest-xml-test/*"/>

	<set-default-maker-template name="my-test"/>

	<!-- 
	Groups
	~~~~~~
	Specify the groups that all tests under this directory will be tagged with, allowing them to be selected 
	for inclusion/exclusion in test runs. Groups are usually named in camelCase. 
	These groups are in addition to any defined by individual tests, and (if inherit=true) any from parent pysysdirconfigs. 
	
	The disableCoverage group is a special group used by code coverage writers to ensure coverage tools are disabled for 
	tests that are performance-critical. 
	-->
	<groups inherit="true" groups="performance, disableCoverage"/>

	<!-- 
	Modes
	~~~~~
	Specify the list of modes tests under this directory can be run in. 
	
	Like test ids, mode names are usually TitleCase, with multiple dimensions delimited by an ``_`` underscore, 
	e.g. ``CompressionGZip_AuthNone``.
	
	Test modes are configured with a Python lambda that returns a list of modes, using a single parameter which is 
	an instance of `pysys.config.descriptor.TestModesConfigHelper` providing access to the inherited modes (and other 
	useful functions/fields). Each mode in the returned list is defined by a dictionary containing parameters to be set 
	on the test object and/or a ``mode`` name. If the mode name is not explicitly provided, a default mode name is 
	generated by concatenating the parameter values with ``_`` (with a ``paramName=`` prefix for any numeric/boolean 
	values).
	
	In your Python lambda you can return a simple list of modes, or combine your own modes with inherited modes 
	defined by parent pysysdirconfigs. You can also use the power of Python list comprehensions to exclude certain modes, 
	perhaps based on dynamic information such as the operating system. Project properties can be accessed 
	using ``helper.project.PROPERTY_NAME``. Avoid expensive operations such as reading the file system from your lambda 
	if possible. 
	
	The first listed mode is the "primary" mode, which is the one that is used by default when executing tests with 
	no ``-m`` argument. 
	
	It's often useful to combine multiple mode 'dimensions', for example all the combinations of a list of web browsers 
	with a list of databases, or compression methods and authentication types. Rather than writing out every combination 
	manually, you can use the function ``helper.createModeCombinations`` to automatically generate all combinations. 
	
	A test can use self.mode to find out which mode it is executing and/or self.mode.params to access any parameters.

	The specified Python code is invoked using `pysys.utils.safeeval.safeEval`.

	-->
	<modes>
		lambda helper: [
			mode for mode in 
				helper.createModeCombinations( # Takes any number of mode lists as arguments and returns a single combined mode list
					helper.inheritedModes,
					{
							'CompressionNone': {'compressionType':None, 'isPrimary':True}, 
							'CompressionGZip': {'compressionType':'gzip'},
					}, 
					[
						{'auth':None}, # Mode name is optional
						{'auth':'OS'}, # In practice auth=OS modes will always be excluded since MyFunkyOS is a fictional OS
					]) 
			# This is Python list comprehension syntax for filtering the items in the list
			if (mode['auth'] != 'OS' or helper.import_module('sys').platform == 'MyFunkyOS')
		]
	</modes>

	<!--
	NB: Older (pre-2.0) PySys projects used a more basic and limited syntax for specifying modes:
	
		<modes inherit="true">
			<mode>CompressionNone</mode>
			<mode>CompressionGZip</mode>
		</modes>
	-->

	<!-- 
	Execution order
	~~~~~~~~~~~~~~~
	Specify as a floating point number an indicator of when to run the tests under 
	this directory, relative to other tests/directories with a higher or lower hint. 
	Empty string hint="" means inherit. The default priority is 0.0 so set the hint to a higher 
	value to execute tests later, or a negative value to execute tests earlier. 
	-->
	<execution-order hint="+100.0"/>

	<!-- 
	Skip
	~~~~
	Comment/uncomment this to mark all tests under this directory as skipped. 
	-->
	<skipped reason="These tests are skipped until Bug-1234 is fixed"/>
	
	<!-- 
	Advanced
	~~~~~~~~
	
	By convention the test class uses the ``pysystest.py`` module if present or else module="run.py" located 
	in the test directory, but it is possible to use a different path (even an absolute path). If you want to use 
	a single Python class for lots of tests, omit the module= attribute, ensure the class has at least one level of 
	Python package, and make sure it's available on the project's <pythonpath> . 
	-->
	<class name="PySysTest" module="${testRootDir}/pysys-extensions/MySharedTestClass.py"/>

	<!-- You can customize the Input/Output/Reference directory names if you wish (or even provide an absolute 
	paths if needed). These can also be specified using the older names output/input/reference with a path= attribute. 
	-->
	<output-dir>MyOutput</output-dir>
	<input-dir>${testRootDir}/pysys-extensions/my_shared_input_files</input-dir>
	<reference-dir>MyReference</reference-dir>
	
	<data>
		<!-- The ability to add user-defined data to the test descriptor is mostly useful when using a 
		shared Python class for lots of tests. 
		
		Project properties (but not other user-data values) can be substituted into the value using ${...}, 
		and ${eval: xxx} syntax can be used to evaluate some Python code (with project properties as Python variables). 

		If a static field of the same name exists on the test class, it will be overridden with the associated user-data 
		value, with some basic type coersion to match the default value of the static field where possible. 
		-->
		<user-data name="myTestDescriptorData" value="foobar"/>
		
		<!-- For long values such as paths the value can be specified in a text (or CDATA) node, and if the 
		value is to be converted to a list, newline and/or comma can be used as delimiters. -->
		<user-data name="myTestDescriptorPath">
			foo/foo-${os_myThirdPartyLibraryVersion}
			foo/bar, foo/baz
			<!-- Comments and whitespace are ignored when converting a string to a list. -->
			foo/bosh
		</user-data>
	</data>

	<!-- Specify traceability requirements implemented by all tests under this directory. 
	
	You can use this for whatever makes sense in your project, but typically they would be defect or user story ids; 
	see examples below. 
	-->
	<requirement id="UserRequirement_1a"/> 
	<requirement id="UserRequirement_2c"/> 
	<requirement id="Performance"/>
	<requirement id="UserStory.XYZ-54321"/>

	<!-- NB: Existing tests may nest some of the above elements under elements such as 
	description/classification/data/traceability rather than directly under the pysystest node, but these extra 
	elements are no longer required (or recommended). 
	-->
	
</pysysdirconfig>